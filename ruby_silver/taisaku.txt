ruby silver試験対策

・to_aメソッド
to_aはハッシュ、範囲オブジェクトなどを配列に変換するメソッドです。
配列の中に配列がある二次元配列として返すことがあります。

・File.dirname
は引数に指定した文字列の一番後ろの/より前の文字列を返します。

・storeメソッド
storeメソッドとは、hashにkeyとvalueを追加するもしくはvalueを変更する際に使用するhashのメソッドの１つです。

#hashの初期化
h = {}
#keyがMike,valueが20を渡す
h.store("Mike",20)

・splat_hash(*)
ハッシュを展開することができる。
hash = {a: 100, b: 200}

def splat_hash(a, b)
  p a
  p b
end

splat_hash(*hash)
[:a, 100]
[:b, 200]

・timeメソッド
puts Time.now + 3600
単位は秒なので3600秒を加算する。

・productメソッド
レシーバーの配列と引数の配列からそれぞれ1つ要素を取り出し新しい配列を作成し、全ての配列を要素とする配列を返します。

・IO.readメソッド
引数に指定したファイルを指定の位置から指定バイト分読み込み文字または文字列として返します。
IO.read("text.txt", 3, offset = 1)
[text.txtの内容]

REx
Silver
REx
Gold

・str.chop
末尾の文字を取り除きます。ただし、文字列の末尾が"\r\n"であれば、2文字とも取り除きます。
破壊的メソッドではないので、selfは影響を受けません。

Stringクラスの似たメソッドの説明を以下にまとめます。

メソッド名	説明
strip	文字列の先頭と末尾の空白文字(\t\r\n\f\v)を取り除きます。
strip!	文字列の先頭と末尾の空白文字(\t\r\n\f\v)を破壊的に取り除きます。
chomp	末尾から改行コードを取り除きます。
chop	末尾の文字を取り除きます。ただし、文字列の末尾が"\r\n"であれば、2文字とも取り除きます。

・shiftメソッド
先頭の配列を取り除くメソッド

・unshiftメソッド
先頭の配列に要素を追加するメソッド

・pushメソッド
配列の最後尾に要素を追加するメソッド

・IOクラスのクラスメソッドを選択してください。

・IO.readlines
IO.readlinesメソッドは引数に指定したファイルの内容を全て読み込み、各行を要素に持つ配列を返します。

・IO.write
IO.writeメソッドは第1引数に指定したファイルを開き、第2引数に指定した文字列の書き込みを行った後ファイルを閉じます。第3引数で書き込み開始位置を指定できます。

Hash#invert
キーと値を入れ替えます。
入れ替えの結果キーが重複した場合は、後に定義された方が優先されます。

p ({a: 100, b: 100}).invert

# 実行結果
# {100=>:b}






IO#eof?: ファイルポインタが終端にある場合、trueを返します。
IO.readlines: ファイルから全てを読み込みます。
IO#seek(offset, whence): ファイルポインタをwhenceからoffsetまで移動します。
IO::SEEK_CUR: 現在のファイルポインタから
その他whenceで使用できる値はRubyリファレンスを参照してください。
4行目で、ファイルから全て読み込んだ時点で、ファイルポインタはファイル終端にあります。
5行目は、ファイル終端から0文字移動するため、6行目では[]のみ表示されます。

以下のコードは問題コードに行番号をつけています。

1: io = File.open('list.txt')
2:
3: while not io.eof?
4:   io.readlines
5:   io.seek(0, IO::SEEK_CUR)
6:   p io.readlines
7: end

・upcaseメソッド
全ての小文字を対応する大文字に置き換えた文字列を返します。どの文字がどう置き換えられるかは、オプションの有無や文字列のエンコーディングに依存します。

・\n
改行のこと

・odd?
奇数であればtrue,偶数であればfalseを返します。

・partition
各要素を、ブロックの条件を満たす要素と満たさない要素に分割します。各要素に対してブロックを評価して、その値が真であった要素の配列と、偽であった要素の配列の 2 つを配列に入れて返します。

・==
Fixnumにあるメソッドです。

数値として等しいかを判定します。1と1.0は同じ数値として判定され、trueになります。

p 1 == 1.0 # ture とされる

・eql?

Numericクラスのメソッドです。

同じクラスのオブジェクトかつレシーバーにある==メソッドで等しいと判定された場合にtrueになります。

p 1.eql? 1.0 # 1.0はFloatクラスのオブジェクトなので、`false`になります。
p 1.eql? (0 + 1) # 計算結果がFixnumクラスのオブジェクトかつ、数値として等しいので、`true`になります。

・equal?

BasicObjectクラスのメソッドです。
オブジェクトIDが同じであれば、trueになります。

オブジェクトIDとは、オブジェクト毎に割り振られる整数値です。Fixnumなどのイミュータブルオブジェクトは常に同じオブジェクトIDになります。

p 1.equal? 1.0
p 1.equal? (1 + 0)

・Thread.new, Thread.start, Thread.forkはスレッドオブジェクトを生成します。

・values_at
引数で指定されたキーに対応する値の配列を返します。
キーに対応する要素がなければデフォルト値が使用されます。

・values
ハッシュの全値の配列を返します。
